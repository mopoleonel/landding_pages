import streamlit as st
import requests
import json
import os
from dotenv import load_dotenv

load_dotenv() # Charge les variables d'environnement du fichier .env

# Titre de l'application Streamlit
st.set_page_config(page_title="G√©n√©rateur de Landing Page IA", layout="wide") # Utilisation de 'wide' pour un layout √©tendu

st.title("üöÄ G√©n√©rateur de Landing Page avec IA")
st.markdown("D√©crivez la landing page que vous souhaitez, et notre IA la g√©n√©rera pour vous !")

# Cr√©ation de deux colonnes pour l'interface
col1, col2 = st.columns([1, 2]) # La colonne de gauche (input) sera plus petite que celle de droite (aper√ßu)

with col1:
    st.header("D√©crivez votre page")
    user_prompt = st.text_area(
        "D√©crivez votre landing page ici (ex: 'Une landing page moderne et minimaliste pour un service de coaching en ligne, avec un bouton d'appel √† l'action pour s'inscrire √† une session gratuite, et des t√©moignages.')",
        height=250, # Augmentation de la hauteur pour une meilleure saisie
        placeholder="D√©crivez le contenu, le style, les sections, et les appels √† l'action de votre landing page..."
    )

    if st.button("G√©n√©rer la Landing Page", type="primary"):
        if user_prompt:
            api_key = os.getenv('GEMINI_API_KEY')

            if not api_key:
                st.error("Erreur : La cl√© API Gemini (GEMINI_API_KEY) n'est pas configur√©e dans les variables d'environnement.")
                st.warning("Veuillez d√©finir votre cl√© API en tant que variable d'environnement dans un fichier `.env` √† la racine de votre projet.")
                st.stop()

            # Placeholder pour le message de chargement
            loading_message_placeholder = st.empty()
            loading_message_placeholder.info("G√©n√©ration en cours... Veuillez patienter quelques instants. Cela peut prendre un certain temps.")
            
            try:
                gemini_prompt = f"""
                G√©n√©rez le code HTML complet pour une landing page responsive et moderne en utilisant Tailwind CSS.
                Le contenu de la page doit √™tre bas√© sur la description suivante :
                "{user_prompt}"

                Assurez-vous que le HTML inclut :
                1.  Une balise `<!DOCTYPE html>` et les balises `<html>`, `<head>`, `<body>`.
                2.  Le CDN de Tailwind CSS dans le `<head>`: `<script src="https://cdn.tailwindcss.com"></script>`.
                3.  Une balise `<meta name="viewport" content="width=device-width, initial-scale=1.0">`.
                4.  Un titre appropri√© dans la balise `<title>`.
                5.  Des sections claires (Hero, Fonctionnalit√©s, T√©moignages, Appel √† l'action, Contact, Pied de page).
                6.  Des classes Tailwind CSS pour un design esth√©tique et responsive.
                7.  Des placeholders pour les images si n√©cessaire (e.g., https://placehold.co/800x500/A855F7/FFFFFF?text=Image).
                8.  Le HTML doit √™tre valide et bien structur√©.

                Ne g√©n√©rez PAS de JavaScript pour des fonctionnalit√©s dynamiques (comme l'envoi de formulaire), sauf si c'est pour des animations CSS ou des interactions simples qui ne n√©cessitent pas de backend.
                Le code g√©n√©r√© doit √™tre UNIQUEMENT le HTML.
                """

                api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"

                payload = {
                    "contents": [
                        {
                            "parts": [
                                {"text": gemini_prompt}
                            ]
                        }
                    ]
                }

                headers = {
                    'Content-Type': 'application/json'
                }

                response = requests.post(api_url, headers=headers, data=json.dumps(payload))
                response.raise_for_status()

                result = response.json()

                generated_html = ""
                if result.get("candidates") and len(result["candidates"]) > 0 and \
                   result["candidates"][0].get("content") and result["candidates"][0]["content"].get("parts") and \
                   len(result["candidates"][0]["content"]["parts"]) > 0:
                    generated_html = result["candidates"][0]["content"]["parts"][0]["text"]
                else:
                    loading_message_placeholder.error("D√©sol√©, je n'ai pas pu g√©n√©rer de contenu HTML. La r√©ponse de l'API √©tait inattendue.")
                    # st.json(result) # Optionnel: pour le d√©bogage, d√©commenter si besoin
                    generated_html = "" # Assurez-vous que generated_html est vide en cas d'erreur
            
            except requests.exceptions.RequestException as e:
                loading_message_placeholder.error(f"Erreur lors de l'appel √† l'API Gemini: {e}")
                st.error("Veuillez v√©rifier votre connexion Internet ou si votre cl√© API est valide et active.")
                generated_html = ""
            except json.JSONDecodeError:
                loading_message_placeholder.error("Erreur de d√©codage JSON de la r√©ponse de l'API. La r√©ponse n'est pas un JSON valide.")
                generated_html = ""
            except Exception as e:
                loading_message_placeholder.error(f"Une erreur inattendue est survenue: {e}")
                generated_html = ""
            finally:
                loading_message_placeholder.empty() # Efface le message de chargement une fois termin√©
        else:
            st.warning("Veuillez saisir une description pour g√©n√©rer la landing page.")
            generated_html = "" # Assurez-vous que generated_html est vide si aucun prompt n'est fourni

        # Stocker le HTML g√©n√©r√© dans la session d'√©tat pour qu'il puisse √™tre affich√© par l'aper√ßu
        st.session_state.generated_html = generated_html
        st.session_state.show_preview = True # Flag pour indiquer que l'aper√ßu doit √™tre affich√©
    else:
        st.session_state.show_preview = False
        st.session_state.generated_html = ""


# Section de l'aper√ßu dans la deuxi√®me colonne
with col2:
    st.header("Aper√ßu de la Landing Page")
    if "show_preview" in st.session_state and st.session_state.show_preview:
        if st.session_state.generated_html:
            st.success("Aper√ßu de la Landing Page g√©n√©r√©e :")
            st.components.v1.html(st.session_state.generated_html, height=800, scrolling=True)
        else:
            st.info("Aucun aper√ßu disponible. Veuillez g√©n√©rer une landing page.")
    else:
        st.info("Votre aper√ßu appara√Ætra ici apr√®s la g√©n√©ration.")
